//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Text;
using ChessGame;

public static class GameBoard
{
    public static List<Square> Squares { get; set; }

    static GameBoard()
    {
        Squares = new List<Square>();
    }

    public static void NewGame()
    {
        GeneratAllBoardSquares();

        PlaceGamePieces();



        var selectedSquare = new Position(5,5);

        DrawGameBoard(Squares, selectedSquare);

        while (true)
        {

            var key = Console.ReadKey(true).Key;

            switch (key)
            {
                case ConsoleKey.LeftArrow:
                    selectedSquare.X--;
                    break;
                case ConsoleKey.RightArrow:
                    selectedSquare.X++;
                    break;
                case ConsoleKey.DownArrow:
                    selectedSquare.Y++;
                    break;
                case ConsoleKey.UpArrow:
                    selectedSquare.Y--;
                    break;
                case ConsoleKey.Enter:
                    Console.Clear();
                    DrawGameBoard(Squares, selectedSquare,GetAccessableSquares(selectedSquare));
                    continue;
            }


            Console.Clear();
            DrawGameBoard(Squares, selectedSquare);



            Console.WriteLine(selectedSquare);
        }
    }

    private static IEnumerable<Square> GetAccessableSquares(Position selectedPosition)
    {
        var currentSquare = Squares.SingleOrDefault(s => s.Position == selectedPosition);

        var Accessables = new List<Square>();

        foreach (var square in Squares)
        {
            if (currentSquare.Piece != null && currentSquare.Piece.CanMoveTo(square))
            {
                Accessables.Add(square);
            }

        }
        return Accessables;
    }

    private static void DrawGameBoard(List<Square> squares, Position selectedSquarePosition, IEnumerable<Square> selectedCanMoveTo = null)
    {
        

        bool oddNumbersAreWhite = true;

        for (int i = 1; i <= 8; i ++)
        {
            int rowNumber = i;

            DrawRow(rowNumber, oddNumbersAreWhite, false, selectedSquarePosition, selectedCanMoveTo);
            DrawRow(rowNumber, oddNumbersAreWhite, true, selectedSquarePosition, selectedCanMoveTo);
            DrawRow(rowNumber, oddNumbersAreWhite, false, selectedSquarePosition, selectedCanMoveTo);
            DrawRow(rowNumber, oddNumbersAreWhite, false, selectedSquarePosition, selectedCanMoveTo);

            oddNumbersAreWhite = !oddNumbersAreWhite;
        }

        Console.BackgroundColor = ConsoleColor.Black;
    }

    private static void DrawRow(int rowNumber, bool oddIsWhite, bool drawPiece, Position selectedSquarePosition, IEnumerable<Square> selectedCanMoveTo = null)
    {
        
        for (int i = 1; i <= 8; i++)
        {
            var square = Squares.SingleOrDefault(s => s.Position.X == i && s.Position.Y == rowNumber);

            if (i == selectedSquarePosition.X && rowNumber == selectedSquarePosition.Y)
            {
                Console.BackgroundColor = ConsoleColor.DarkCyan;

            }
            else if (selectedCanMoveTo != null && selectedCanMoveTo.Any(s => s.Position.X == i && s.Position.Y== rowNumber))
            {
                Console.BackgroundColor = oddIsWhite
                    ? (i % 2 == 0 ? ConsoleColor.DarkGreen : ConsoleColor.Green)
                    : (i % 2 == 0 ? ConsoleColor.Green : ConsoleColor.DarkGreen);
            }
            else
            {
                Console.BackgroundColor = oddIsWhite
                    ? (i % 2 == 0 ? ConsoleColor.DarkGray : ConsoleColor.Gray)
                    : (i % 2 == 0 ? ConsoleColor.Gray : ConsoleColor.DarkGray);
            }



            Console.ForegroundColor = square.Piece != null && square.Piece.PieceColor == PieceColor.White
                ? ConsoleColor.White
                : ConsoleColor.Black;


            Console.Write(new string(' ', 3));
            if (square.Piece != null && drawPiece)
            {
                Console.Write(square.Piece);
            }
            else
            {
                Console.Write(' ');
            }

            Console.Write(new string(' ', 3));
        }

        Console.WriteLine();
    }

    private static void PlaceGamePieces()
    {
        for (int x = 1; x <= 8; x++)
        {
            PlaceGamePiece(new Position(x,7), new Pawn(PieceColor.White));

            PlaceGamePiece(new Position(x, 2), new Pawn(PieceColor.Black));
        }

        PlaceGamePiece(new Position(1, 8), new Rook(PieceColor.White));
        PlaceGamePiece(new Position(2, 8), new Knight(PieceColor.White));
        PlaceGamePiece(new Position(3, 8), new Bishop(PieceColor.White));
        PlaceGamePiece(new Position(4, 8), new Queen(PieceColor.White));
        PlaceGamePiece(new Position(5, 8), new King(PieceColor.White));
        PlaceGamePiece(new Position(6, 8), new Bishop(PieceColor.White));
        PlaceGamePiece(new Position(7, 8), new Knight(PieceColor.White));
        PlaceGamePiece(new Position(8, 8), new Rook(PieceColor.White));

        PlaceGamePiece(new Position(5, 5), new Bishop(PieceColor.White));

        PlaceGamePiece(new Position(1, 1), new Rook(PieceColor.Black));
        PlaceGamePiece(new Position(2, 1), new Knight(PieceColor.Black));
        PlaceGamePiece(new Position(3, 1), new Bishop(PieceColor.Black));
        PlaceGamePiece(new Position(4, 1), new Queen(PieceColor.Black));
        PlaceGamePiece(new Position(5, 1), new King(PieceColor.Black));
        PlaceGamePiece(new Position(6, 1), new Bishop(PieceColor.Black));
        PlaceGamePiece(new Position(7, 1), new Knight(PieceColor.Black));
        PlaceGamePiece(new Position(8, 1), new Rook(PieceColor.Black));


    }

    private static void Move(Position fromSquarePosition, Position toSquarePosition)
    {
        var from = Squares.SingleOrDefault(s => s.Position == fromSquarePosition);
        var destinaion = Squares.SingleOrDefault(s => s.Position == fromSquarePosition);

        from.Piece.MoveTo(destinaion);
    }
    private static void PlaceGamePiece(Position squarePosition, Piece piece)
    {
        var square = Squares.SingleOrDefault(s => s.Position == squarePosition);

        square.Piece = piece;
        piece.Square = square;

    }

    private static void GeneratAllBoardSquares()
    {
        for (int x = 1; x <= 8; x++)
        {
            for (int y = 1; y <= 8; y++)
            {
                Squares.Add(new Square
                {
                    Position = new Position(x,y)
                });
            }
        }
    }

}

