//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Text;
using System.Threading.Tasks;
using ChessGame;

public static class GameBoard
{
    public static List<Square> Squares { get; private set; }
    public static PieceColor Turn { get; private set; }
    public static bool IsCheckState { get; set; }


    static GameBoard()
    {
        Squares = new List<Square>();
    }

    public static void NewGame()
    {
        NewGameSoundEffect();

        Console.SetWindowSize(80, 40);

        Turn = PieceColor.White;
        GeneratAllBoardSquares();

        PlaceGamePieces();

        var currentPosition = new Position(5, 5);
        Position selectedPosition = null;
        DrawGameBoard(Squares, currentPosition);

        IEnumerable<Square> accessableSquares = null;

        while (true)
        {

            var key = Console.ReadKey(true).Key;

            switch (key)
            {
                case ConsoleKey.LeftArrow:
                    if (currentPosition.X > 1)
                    {
                        currentPosition.X--;
                        break;
                    }
                    continue;
                case ConsoleKey.RightArrow:
                    if (currentPosition.X < 8)
                    {
                        currentPosition.X++;
                        break;
                    }
                    continue;
                    
                case ConsoleKey.DownArrow:
                    if (currentPosition.Y < 8)
                    {
                        currentPosition.Y++;
                        break;
                    }
                    continue;
                    
                case ConsoleKey.UpArrow:
                    if (currentPosition.Y > 1)
                    {
                        currentPosition.Y--;
                        break;
                    }
                    continue;
                    
                case ConsoleKey.Enter:



                    if (accessableSquares != null)
                    {
                        if (accessableSquares.Any(a => a.Position == currentPosition))
                        {

                            Move(selectedPosition, currentPosition);

                            selectedPosition = null;
                            break;
                        }

                    }

                    selectedPosition = new Position(currentPosition.X, currentPosition.Y);
                    break;

                case ConsoleKey.Escape:
                    selectedPosition = null;
                    break;
            }


            IsCheckState = IsCheck(Turn);

            if (IsColorTurn(selectedPosition) && (!IsCheckState || PieceKindEquals(selectedPosition, typeof(King))))
            {
                accessableSquares = GetAccessibleSquares(selectedPosition);
            }

            Console.Clear();
            DrawGameBoard(Squares, currentPosition, accessableSquares);

            Console.WriteLine(currentPosition);

            if (Turn == PieceColor.White)
            {
                Console.WriteLine("Vits Tur");
            }
            else
            {
                Console.WriteLine("Svarts Tur");
            }


            if (IsCheckState && KingCanNotMove(Turn))
            {
                Console.WriteLine("Schack Matt!");
            }
            else if (IsCheckState)
            {
                Console.WriteLine("Schack!"); //todo fixa så man inte kan ta en pjäs som setter kungen i schack
            }
        }
        Console.ReadKey();
    }

    private static bool KingCanNotMove(PieceColor turn)
    {
        var king = GetAllSquaresWithPieces().SingleOrDefault(s => s.Piece.GetType() == typeof(King) && s.Piece.PieceColor == turn);

        return !GetAccessibleSquares(king.Position).Any();
    }

    private static IEnumerable<Square> GetAllSquaresWithPieces()
    {
        return GameBoard.Squares.Where(s => s.Piece != null);
    }

    private static bool PieceKindEquals(Position selectedPosition, Type type)
    {
        if (selectedPosition == null)
        {
            return false;
        }
        var squares = GameBoard.Squares.SingleOrDefault(s => s.Position == selectedPosition);

        return squares.Piece != null && squares.Piece.GetType() == type;
    }



    private static async void NewGameSoundEffect()
    {
        await Task.Run(() =>
        {
            Console.Beep(300, 150);
            Console.Beep(500, 150);
        });

    }


    private static bool IsCheck(PieceColor turn)
    {
        var attackers = Squares.Where(s => s.Piece != null);

        var result = new Stack<bool>();

        result.Push(false);

        Parallel.ForEach(attackers, (square, state) =>
        {
            var canMoveTo = GetAccessibleSquares(square.Position);

            if (canMoveTo.Any(c => c != null && (c.Piece != null && c.Piece.GetType() == typeof(King))))
            {
                CheckSoundEffect();
                result.Push(true);

                state.Stop();
                return;
            }
        });

        return result.Pop();

    }

    private static async void CheckSoundEffect()
    {
        await Task.Run(() =>
        {
            Console.Beep(500, 150);
            Console.Beep(800, 150);
        });

    }

    private static bool IsColorTurn(Position selectedPosition)
    {
        var square = Squares.SingleOrDefault(s => s.Position == selectedPosition);

        if (square == null || square.Piece == null)
        {
            return true;
        }

        if (square.Piece.PieceColor == PieceColor.Black && Turn == PieceColor.Black)
        {
            return true;
        }
        else if (square.Piece.PieceColor == PieceColor.White && Turn == PieceColor.White)
        {
            return true;
        }
        return false;
    }

    public static IEnumerable<Square> GetAccessibleSquares(Position selectedPosition)
    {
        if (selectedPosition == null)
        {
            return null;
        }
        var currentSquare = Squares.SingleOrDefault(s => s.Position == selectedPosition);

        var Accessables = new List<Square>();


        foreach (var square in Squares)
        {
            if (currentSquare != null && (currentSquare.Piece != null && currentSquare.Piece.CanMoveTo(square)))
            {
                Accessables.Add(square);
            }

        }

        return Accessables;
    }

    private static void DrawGameBoard(List<Square> squares, Position selectedSquarePosition, IEnumerable<Square> selectedCanMoveTo = null)
    {


        bool oddNumbersAreWhite = true;

        for (int i = 1; i <= 8; i++)
        {
            int rowNumber = i;

            DrawRow(rowNumber, oddNumbersAreWhite, false, selectedSquarePosition, selectedCanMoveTo);
            DrawRow(rowNumber, oddNumbersAreWhite, true, selectedSquarePosition, selectedCanMoveTo);
            DrawRow(rowNumber, oddNumbersAreWhite, false, selectedSquarePosition, selectedCanMoveTo);
            DrawRow(rowNumber, oddNumbersAreWhite, false, selectedSquarePosition, selectedCanMoveTo);

            oddNumbersAreWhite = !oddNumbersAreWhite;
        }

        Console.BackgroundColor = ConsoleColor.Black;
    }

    private static void DrawRow(int rowNumber, bool oddIsWhite, bool drawPiece, Position selectedSquarePosition, IEnumerable<Square> selectedCanMoveTo = null)
    {

        for (int i = 1; i <= 8; i++)
        {
            var square = Squares.SingleOrDefault(s => s.Position.X == i && s.Position.Y == rowNumber);

            if (i == selectedSquarePosition.X && rowNumber == selectedSquarePosition.Y)
            {
                Console.BackgroundColor = ConsoleColor.DarkCyan;

            }
            else if (selectedCanMoveTo != null && selectedCanMoveTo.Any(s => s.Position.X == i && s.Position.Y == rowNumber))
            {
                Console.BackgroundColor = oddIsWhite
                    ? (i % 2 == 0 ? ConsoleColor.DarkGreen : ConsoleColor.Green)
                    : (i % 2 == 0 ? ConsoleColor.Green : ConsoleColor.DarkGreen);
            }
            else
            {
                Console.BackgroundColor = oddIsWhite
                    ? (i % 2 == 0 ? ConsoleColor.DarkGray : ConsoleColor.Gray)
                    : (i % 2 == 0 ? ConsoleColor.Gray : ConsoleColor.DarkGray);
            }



            Console.ForegroundColor = square.Piece != null && square.Piece.PieceColor == PieceColor.White
                ? ConsoleColor.White
                : ConsoleColor.Black;


            Console.Write(new string(' ', 3));
            if (square.Piece != null && drawPiece)
            {
                Console.Write(square.Piece);
            }
            else
            {
                Console.Write(' ');
            }

            Console.Write(new string(' ', 3));
        }

        Console.WriteLine();
    }

    private static void PlaceGamePieces()
    {
        for (int x = 1; x <= 8; x++)
        {
            PlaceGamePiece(new Position(x, 7), new Pawn(PieceColor.White));

            PlaceGamePiece(new Position(x, 2), new Pawn(PieceColor.Black));
        }

        PlaceGamePiece(new Position(1, 8), new Rook(PieceColor.White));
        PlaceGamePiece(new Position(2, 8), new Knight(PieceColor.White));
        PlaceGamePiece(new Position(3, 8), new Bishop(PieceColor.White));
        PlaceGamePiece(new Position(4, 8), new Queen(PieceColor.White));
        PlaceGamePiece(new Position(5, 8), new King(PieceColor.White));
        PlaceGamePiece(new Position(6, 8), new Bishop(PieceColor.White));
        PlaceGamePiece(new Position(7, 8), new Knight(PieceColor.White));
        PlaceGamePiece(new Position(8, 8), new Rook(PieceColor.White));

        PlaceGamePiece(new Position(1, 1), new Rook(PieceColor.Black));
        PlaceGamePiece(new Position(2, 1), new Knight(PieceColor.Black));
        PlaceGamePiece(new Position(3, 1), new Bishop(PieceColor.Black));
        PlaceGamePiece(new Position(4, 1), new Queen(PieceColor.Black));
        PlaceGamePiece(new Position(5, 1), new King(PieceColor.Black));
        PlaceGamePiece(new Position(6, 1), new Bishop(PieceColor.Black));
        PlaceGamePiece(new Position(7, 1), new Knight(PieceColor.Black));
        PlaceGamePiece(new Position(8, 1), new Rook(PieceColor.Black));


    }

    public static void Move(Position fromSquarePosition, Position toSquarePosition)
    {
        var piece = TakeGamePiece(fromSquarePosition);

        PlaceGamePiece(toSquarePosition, piece);

        Turn = Turn == PieceColor.White ? PieceColor.Black : PieceColor.White;
        piece.HasMoved = true;
        MovePieceSoundEffect();
    }

    private static async void MovePieceSoundEffect()
    {
        await Task.Run(() =>
        {
            Console.Beep(400, 150);
        });

    }

    internal static void PlaceGamePiece(Position squarePosition, Piece piece)
    {
        var square = Squares.SingleOrDefault(s => s.Position == squarePosition);

        square.Piece = piece;
        piece.Square = square;

    }

    internal static Piece TakeGamePiece(Position squarePosition)
    {
        var square = Squares.SingleOrDefault(s => s.Position == squarePosition);

        var piece = square.Piece;

        square.Piece = null;
        return piece;
    }

    private static void GeneratAllBoardSquares()
    {
        for (int x = 1; x <= 8; x++)
        {
            for (int y = 1; y <= 8; y++)
            {
                Squares.Add(new Square
                {
                    Position = new Position(x, y)
                });
            }
        }
    }

}

